/*
338. 比特位计数
给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]
进阶:

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。

F(0) = 0                             = 0
F(1) = 01  = F(1/2) + 1%2 = F(0) + 1 = 1
F(2) = 10  = F(2/2) + 2%2 = F(1) + 0 = 1
F(3) = 11  = F(3/2) + 3%2 = F(1) + 1 = 2
F(4) = 110 = F(4/2) + 4%2 = F(2) + 0 = 1
F(5) = 101 = F(5/2) + 5%2 = F(2) + 1 = 2
F(6) = 110 = F(6/2) + 6%2 = F(3) + 0 = 2
F(7) = 111 = F(7/2) + 7%2 = F(3) + 1 = 3

F(0) = 0 , N = 0
F(N) = F(N/2) + N%2 , N > 0*/


两个思路
1、上述动态规划
2、利用位运算
int popcount(int n){
    int res=0;
    while(n){
        ans+=n&1;
        n>>=1;
    }
    return res;
}
