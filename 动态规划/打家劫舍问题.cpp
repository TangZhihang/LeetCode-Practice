/*


198. 打家劫舍1
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。
'''
'''
动态规划
dp[i]的含义，从0到i的偷到的最多的前
base case：
dp[0]=nums[0]
dp[1]=max(nums[0],nums[1])

状态转移：
对于每一个房屋，可以选择偷或者不偷
偷，则累计偷的钱就为dp[i-2]+nums[i]
不偷，则累计偷的钱就为dp[i-1]

所以dp[i]=max(dp[i-2]+nums[i],dp[i-1])



*/

class Solution {
public:
    int rob(vector<int>& nums) {
        vector<int> dp(nums.size(),0);
        if(nums.size()==0) return 0;
        if(nums.size()==1) return nums[0];
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<nums.size();++i){
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[nums.size()-1];
    }
};

/*
213. 打家劫舍 II
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2:

输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

 */

//解法基本相同，只不过将问题编程[0:n-1]和[1:n]两个单独计算
// 最后再比较两个的结果的大小


 class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        if(n==1)return nums[0];
        if(n==2) return max(nums[0],nums[1]);
        vector<int> dp(n,0);
        vector<int> dp1(n,0);
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        dp1[1]=nums[1];
        dp1[2]=max(nums[2],nums[1]);
        for(int i=2;i<nums.size()-1;++i){
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);

        }
        for(int i=3;i<nums.size();++i){
            dp1[i]=max(dp1[i-2]+nums[i],dp1[i-1]);

        }
        return max(dp[n-2],dp1[n-1]);
    }
};
